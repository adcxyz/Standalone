TITLE:: Standalone
summary:: Keep macOS Standalone apps fully self-contained.
categories:: Standalone
related:: Classes/LanguageConfig, Guides/standalones

DESCRIPTION::
The Standalone quark allows exporting a fully self-contained
macOS Standalone from a setup in a SuperCollider environment,
and locking it against accidental installation changes.

First quick example - install this quark:
code::
Quarks.install("Standalone");
Quarks.install("~/scgit/adc_quarks/Standalone");
// then reboot interpreter, then export
::
code::
Standalone.export("MyLittleLony");
::
This should end with opening the new app, and playing a little line of chords when all is well.


CLASSMETHODS::

METHOD:: export
export current SuperCollider app and its quark setup as a standalone.
strong::exporting may sometimes fail for unknown reasons. please report if that happens. : ::

METHOD:: appName
the name of the current app

METHOD:: appPath
the path to the current app

METHOD:: appDir
the dir where the current app is

code::
Standalone.appName
Standalone.appPath
Standalone.appDir
::

METHOD:: activate
Turn the current app into a selfcontained standalone.

METHOD:: lock, unlock
Turn checking for paths on startup on and off.

METHOD:: activate

METHOD:: locksOnStartup
a flag whether Standalone will check for locking on startup
code::
Standalone.locksOnStartup;
::

subsection:: Internal Methods

METHOD:: initClass
Standalone will check for self-containedness on startup if lock file is present.

METHOD:: lockupFilename
METHOD:: lockupPath
the filename and path for the lock file (inside String.scDir)
code::
Standalone.lockupFilename;
Standalone.lockupPath;
::

METHOD:: internalExtDirName
METHOD:: internalExtDir
the folder name and path for the internal Extentions dir (inside String.scDir)
code::
Standalone.internalExtDirName;
Standalone.internalExtDir;
::

METHOD:: isInClassLib
checks whether Standalone.sc is already in the default SCClassLibrary
code::
Standalone.isInClassLib;
::
METHOD:: isInIntExt
checks whether Standalone.sc is in the InternalExtensions folder
code::
Standalone.isInIntExt;
::

METHOD:: moveToClassLib
moves Standalone.sc to the default SCClassLibrary

METHOD:: checkAndSetPaths
check whether includePaths and excludePaths are set for self-containment.

METHOD:: clearIncludePaths
remove all includePaths except internalExtDir

METHOD:: excludeExternalExtDirs
exclude userAppSupportDir and systemAppSupportDir

METHOD:: includeInternalExtDir
add internalExtDir to includePaths

METHOD:: startupFileText
return default codestring for making a code::startupFiles:: method

METHOD:: startupFileText
return default codestring for making a code::startup.scd:: file

METHOD:: checkAndSetDirPaths
check and set dirPaths for standalone if needed.
returns flag true when changes were made.

private:: prStopAndProposeReboot


subsection::Tests

Most of these should not be neceassary, because export works well now.

code::
Standalone.isInClassLib; // true when already there
Standalone.moveToClassLib; // move if not there

Standalone.lockupFilename; // lockup file name, path, presence
Standalone.lockupPath;
Standalone.locksOnStartup;
// this only works when copied to
Standalone.lock;		   // creates lockup file
Standalone.locksOnStartup;
Standalone.unlock;
Standalone.locksOnStartup; // removes lockup file

Standalone.internalExtDir.openOS; // already there?

LanguageConfig.currentPath.openOS; // curr config file

//
Standalone.clearIncludePaths;
LanguageConfig.includePaths;

Standalone.excludeExternalExtDirs;
LanguageConfig.excludePaths;

Standalone.includeInternalExtDir;
// do everything in one go
Standalone.activate;
::
